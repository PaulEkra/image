<!DOCTYPE html>
	<html lang="fr">
    <%- include ('./partials/head') %>    
	<body>
		

		<div class="container ">
			<h1><%= title %></h1>
			<br>
			<div id="login">
				<form method="post" action="/login">
                    <legend class="text-center">Veuillez saisir vos identifiants</legend>
                    <div class="form-floating mb-3">
                        <input type="email" class="form-control" name="email" id="email" placeholder="email">
                        <label for="email">email</label>
                    </div>
                    <div class="form-floating">
                        <input type="password" class="form-control" name="password" id="password" placeholder="Password">
                        <label for="password">Mot de passe</label>
                    </div>
					
					<button type="submit" class="btn btn-outline-primary  m-3 w-25">Connexion</button>
                    <p><a href="/register">Inscrivez-vous </a> Si vous n'avez pas de compte</p>
				</form>
			</div>

		</div>

		<%- include ('./partials/footer') %>
    	<script>
			/*var form = document.querySelector('form');
			form.addEventListener("submit", loginUser);	
            
            var loginArea = document.querySelector('#login');
            var profileArea = document.querySelector('#profile');
            var connectionLinkArea = document.querySelector('#connectionLink');
            handleFormDisplay();

            var displayPayloadBtn = document.querySelector('#display-payload');
            displayPayloadBtn.addEventListener('click', displayPayload);

            var disconnectBtn = document.querySelector('#disconnectBtn');
            disconnectBtn.addEventListener('click', disconnect);

            var memberOnlyLink = document.querySelector('#member-only');
            memberOnlyLink.addEventListener('click', makeRequestWithToken);

			function loginUser(event) {				
                loginUserWithXHR(event);
			}	
			
			function loginUserWithXHR(event) {		
				event.preventDefault();
                console.log('loginUserWithXHR');		

				// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
				var xhr = new XMLHttpRequest();
				xhr.open("POST", '/login', true);

				//Send the proper header information along with the request
				xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

				xhr.onreadystatechange = function() {//Call a function when the state changes.
					if(xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
                        // add token to localStorage
                        var token = xhr.response;
                        localStorage.setItem('token', token);
                        switchToLoggedinMode();

						form.reset();
					}
				}				
				var email = document.getElementById('email').value;
				var password = document.getElementById('password').value;
				var payLoad = "email=" + email + "&" + "password=" + password; 
				xhr.send(payLoad); 				
			}

            // Afficher les bloc en fonction de la présence d'un token
            function handleFormDisplay() { 
                tokenFromStorage = localStorage.getItem('token');            
                console.log('handleFormDisplay tokenFromStorage', tokenFromStorage);   
                if(tokenFromStorage) {
                    switchToLoggedinMode();                     
                } else {
                    switchToLoggedOutMode();
                }
            }

            // Afficher le bloc de deconnexion
            function switchToLoggedinMode() {
                loginArea.style.display = 'none';
                profileArea.style.display = 'block';
                connectionLinkArea.innerHTML = '<a href="/login">déconnexion</a>';
            }

            // Afficher le bloc de connexion
            function switchToLoggedOutMode() {
                loginArea.style.display = 'block';
                profileArea.style.display = 'none';
                connectionLinkArea.innerHTML = '<a href="/login">connexion</a>';      
            }

            function displayPayload() {
                var payload = parseJwt(); // On recupère le token decode grace à la foction
                var decodedPayloadDiv = document.querySelector('#decoded-payload');
                decodedPayloadDiv.innerHTML = '<pre>' + JSON.stringify(payload) + '</pre>'; // Puis on l'affiche
            }

            // Permet de decoder le token
            function parseJwt () { 
                tokenFromStorage = localStorage.getItem('token');            
                console.log('parseJwt tokenFromStorage', tokenFromStorage);
                if(tokenFromStorage) {
                    var base64Payload = tokenFromStorage.split('.')[1]; // On convertir le token en tableau separant les éléments par un point puis on recupère le deuxième               
                    return JSON.parse(window.atob(base64Payload)); // On retourne l'élément decode avec atob sous forme d'objet Json
                } else {
                    return 'no token to parse'; // Si il n'ya pas de token
                }          
            };

            // Fonction pour se deconnecter
            function disconnect() {
                switchToLoggedOutMode();
                localStorage.removeItem('token');
            }
            

            // Permet d'ajouter notre token à la requete
            function makeRequestWithToken(evt) {
                evt.preventDefault();
                console.log('makeRequestWithToken');
                var page = this.id; // On recupère l'id du lien
                tokenFromStorage = localStorage.getItem('token');   
                var config = {};
                if(tokenFromStorage) {
                    config.headers =  {'Authorization': "Bearer " + JSON.parse(tokenFromStorage)} // On parse avec json pour retirer les guillemets autour du token
                }

                var bodyParameters = {};

                axios.get( 
                    'http://localhost:2000/' + page, // Ce qui appelle la route /member-only
                    config // On ajoute l'objet de configuration qui contient le header
                ).then((res) => {
                    console.log('success');
                    console.log(res);  
                    const memberDataDiv = document.querySelector('#member-data');
                    memberDataDiv.innerHTML = '<pre>Bienvenue ' + res.data.user + '<br>'
                                                + '. Votre rôle : ' + res.data.role  + '<br>'
                                                + '. Vous pouvez tout casser sur ' + res.data.iss
                                                + '</pre>';
                })
                .catch(err => {
                    console.error('makeRequestWithToken err', err);
                });
            }*/
		</script> 
	</body>
</html>